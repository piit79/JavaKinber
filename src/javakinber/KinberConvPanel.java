/*
 * KinberConversPanel.java
 *
 * Created on 08-Jul-2009, 15:04:18
 */

package javakinber;

import javax.swing.*;
import javax.swing.text.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;

/**
 *
 * @author error
 */
public class KinberConvPanel extends javax.swing.JPanel {

    private KinberContact contact;
    private JavaKinber jKinber;
    private KinberFrame kFrame;
    private JFrame historyFrame;
    private KinberCopyPasteMenu copyPasteMenu;

    public static final int MAX_CONV_TIME = 15 * 60 * 1000;

    /** Creates new KinberConversPanel */
    public KinberConvPanel() {
        super();
        initComponents();
        textArea.setWrapStyleWord(true);
        copyPasteMenu = new KinberCopyPasteMenu(textArea);
        historyFrame = null;
    }

    public KinberConvPanel(JavaKinber aJKinber, KinberFrame aFrame, KinberContact aContact) {
        this();
        jKinber = aJKinber;
        kFrame = aFrame;
        contact = aContact;
    }

    public KinberContact getContact() {
        return contact;
    }

    public void displayMessage(KinberContact msgContact, String message) {
        int direction = msgContact.getNickName().equals(jKinber.getNickName()) ? KinberHistory.MESSAGE_SENT : KinberHistory.MESSAGE_RECEIVED;
        convArea.displayMessage(new KinberHistoryItem(msgContact.getNickName(), direction, new Date(), message));
    }

    public void sendMessage(String message) {
        jKinber.sendMessage(contact, message);
        this.displayMessage(jKinber.getMyContact(), message);
    }

    public void sendMessage() {
        String message = textArea.getText();
        sendMessage(message);
        textArea.setText("");
    }

    public void focusTextArea() {
        textArea.requestFocusInWindow();
    }

    @Override
    public boolean isFocusOwner() {
        return textArea.isFocusOwner() || buttonNo.isFocusOwner() ||
                buttonYes.isFocusOwner() || buttonNo.isFocusOwner() ||
                buttonSend.isFocusOwner() || buttonClose.isFocusOwner();
    }

    public void close() {
        getParent().remove(this);
    }

    public void buttonSendSetStatus() {
        boolean buttonEnable = textArea.getText().length() > 0;
        if (!buttonSend.isEnabled() && buttonEnable) {
            buttonSend.setEnabled(true);
        } else if (buttonSend.isEnabled() && !buttonEnable) {
            buttonSend.setEnabled(false);
        }
    }

    public void buttonHistorySetSelected(boolean status) {
        buttonHistory.setSelected(status);
        // FIXME: Rename method, what if history frame opened before tab?
        if (!status) historyFrame = null;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        convArea = new javakinber.KinberConvArea();
        buttonPanel = new javax.swing.JPanel();
        leftButtonPanel = new javax.swing.JPanel();
        buttonOK = new javax.swing.JButton();
        buttonYes = new javax.swing.JButton();
        buttonNo = new javax.swing.JButton();
        rightButtonPanel = new javax.swing.JPanel();
        buttonClose = new javax.swing.JButton();
        buttonHistory = new javax.swing.JToggleButton();
        buttonSend = new javax.swing.JButton();
        messageScrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();

        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(convArea, gridBagConstraints);

        buttonPanel.setMinimumSize(new java.awt.Dimension(434, 35));
        buttonPanel.setPreferredSize(new java.awt.Dimension(434, 35));
        buttonPanel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        buttonPanel.setLayout(new java.awt.GridBagLayout());

        leftButtonPanel.setMinimumSize(new java.awt.Dimension(186, 35));
        leftButtonPanel.setPreferredSize(new java.awt.Dimension(186, 35));
        leftButtonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        buttonOK.setText("OK");
        buttonOK.setMinimumSize(new java.awt.Dimension(54, 25));
        buttonOK.setPreferredSize(new java.awt.Dimension(54, 25));
        buttonOK.setMaximumSize(new java.awt.Dimension(54, 25));
        buttonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOKActionPerformed(evt);
            }
        });
        leftButtonPanel.add(buttonOK);

        buttonYes.setText("Yes");
        buttonYes.setMinimumSize(new java.awt.Dimension(59, 25));
        buttonYes.setPreferredSize(new java.awt.Dimension(59, 25));
        buttonYes.setMaximumSize(new java.awt.Dimension(59, 25));
        buttonYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonYesActionPerformed(evt);
            }
        });
        leftButtonPanel.add(buttonYes);

        buttonNo.setText("No");
        buttonNo.setMinimumSize(new java.awt.Dimension(53, 25));
        buttonNo.setPreferredSize(new java.awt.Dimension(53, 25));
        buttonNo.setMaximumSize(new java.awt.Dimension(53, 25));
        buttonNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNoActionPerformed(evt);
            }
        });
        leftButtonPanel.add(buttonNo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        buttonPanel.add(leftButtonPanel, gridBagConstraints);

        rightButtonPanel.setMinimumSize(new java.awt.Dimension(248, 35));
        rightButtonPanel.setPreferredSize(new java.awt.Dimension(248, 35));
        rightButtonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        buttonClose.setText("Close");
        buttonClose.setMaximumSize(new java.awt.Dimension(73, 25));
        buttonClose.setMinimumSize(new java.awt.Dimension(73, 25));
        buttonClose.setPreferredSize(new java.awt.Dimension(73, 25));
        buttonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCloseActionPerformed(evt);
            }
        });
        rightButtonPanel.add(buttonClose);

        buttonHistory.setText("History");
        buttonHistory.setMaximumSize(new java.awt.Dimension(85, 25));
        buttonHistory.setMinimumSize(new java.awt.Dimension(85, 25));
        buttonHistory.setPreferredSize(new java.awt.Dimension(85, 25));
        buttonHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonHistoryActionPerformed(evt);
            }
        });
        rightButtonPanel.add(buttonHistory);

        buttonSend.setText("Send");
        buttonSend.setEnabled(false);
        buttonSend.setMaximumSize(new java.awt.Dimension(70, 25));
        buttonSend.setMinimumSize(new java.awt.Dimension(70, 25));
        buttonSend.setPreferredSize(new java.awt.Dimension(70, 25));
        buttonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSendActionPerformed(evt);
            }
        });
        rightButtonPanel.add(buttonSend);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 2.0;
        buttonPanel.add(rightButtonPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(buttonPanel, gridBagConstraints);

        messageScrollPane.setMinimumSize(new java.awt.Dimension(23, 70));
        messageScrollPane.setPreferredSize(new java.awt.Dimension(223, 93));

        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        textArea.setForeground(new java.awt.Color(51, 97, 147));
        textArea.setLineWrap(true);
        textArea.setRows(6);
        textArea.setFocusCycleRoot(true);
        textArea.setMinimumSize(new java.awt.Dimension(100, 130));
        textArea.setPreferredSize(new java.awt.Dimension(220, 130));
        textArea.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                textAreaFocusGained(evt);
            }
        });
        textArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textAreaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textAreaKeyReleased(evt);
            }
        });
        messageScrollPane.setViewportView(textArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        add(messageScrollPane, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void textAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaKeyPressed
        // Ctrl+Enter sends message
        if (evt.getKeyCode() == 10 && (evt.getModifiers() & Event.CTRL_MASK) > 0) {
            sendMessage();
        }
        // Esc or Ctrl+W closes current tab
        //System.out.println("KEY: " + evt.getKeyChar() + " | MOD: " + evt.getModifiers() + " (" + Event.CTRL_MASK + ") | CODE: " + evt.getKeyCode());
        if ((evt.getKeyCode() == 27) || ((evt.getKeyCode() == 87) && (evt.getModifiers() ==  Event.CTRL_MASK))) {
            close();
        }
    }//GEN-LAST:event_textAreaKeyPressed

    private void textAreaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_textAreaFocusGained
        // TODO: stop blinking envelope icon on incoming message
        //KinberUtil.log('D', "TFOCG", "Active? " + kFrame.isActive());
        if (kFrame.isActive()) {
            if (kFrame.isBlinkingTab(contact)) {
                KinberUtil.log('D', "TFOCG", "Stopping blinking for " + contact.toStringV());
                kFrame.blinkTab(contact, false);
            }
            if (kFrame.isBlinkingTrayIcon()) {
                KinberUtil.log('D', "TFOCG", "Stopping blinking of tray icon");
                kFrame.blinkTrayIcon(false);
            }
        }
    }//GEN-LAST:event_textAreaFocusGained

    private void buttonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOKActionPerformed
        sendMessage("OK");
    }//GEN-LAST:event_buttonOKActionPerformed

    private void buttonYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonYesActionPerformed
        sendMessage("Yes");
    }//GEN-LAST:event_buttonYesActionPerformed

    private void buttonNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNoActionPerformed
        sendMessage("No");
    }//GEN-LAST:event_buttonNoActionPerformed

    private void buttonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCloseActionPerformed
        close();
    }//GEN-LAST:event_buttonCloseActionPerformed

    private void textAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaKeyReleased
        buttonSendSetStatus();
    }//GEN-LAST:event_textAreaKeyReleased

    private void buttonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSendActionPerformed
        sendMessage();
        buttonSendSetStatus();
    }//GEN-LAST:event_buttonSendActionPerformed

    private void buttonHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonHistoryActionPerformed
        if (buttonHistory.isSelected() && historyFrame == null) {
            historyFrame = kFrame.showHistoryFrame(contact.getNickName(), this);
        } else if (!buttonHistory.isSelected() && historyFrame != null) {
            historyFrame.dispose();
            historyFrame = null;
        }
    }//GEN-LAST:event_buttonHistoryActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonClose;
    private javax.swing.JToggleButton buttonHistory;
    private javax.swing.JButton buttonNo;
    private javax.swing.JButton buttonOK;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton buttonSend;
    private javax.swing.JButton buttonYes;
    private javakinber.KinberConvArea convArea;
    private javax.swing.JPanel leftButtonPanel;
    private javax.swing.JScrollPane messageScrollPane;
    private javax.swing.JPanel rightButtonPanel;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
